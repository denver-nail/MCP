import { NpmAuditReport, Vulnerability } from '../types/npmAudit.js';
import { getDepChain } from './getDepChain.js';
import { AuditBuckets, NormalizedAudit, NormalizedPackage } from '../types/customAudit.js';

function _normalizeAuditResult(auditResult: NpmAuditReport): AuditBuckets {
  const result: AuditBuckets = {
    critical: [],
    high: [],
    moderate: [],
    low: [],
    info: [],
  };
  for (const key in auditResult.vulnerabilities) {
    const packageInfo = auditResult.vulnerabilities[key];
    const normalizedPackage = _normalizePackage(packageInfo);
    if (normalizedPackage) {
      result[normalizedPackage.severity].push(normalizedPackage);
    }
  }
  return result;

  /**
   * 标准化漏洞包信息
   * @param packageInfo - 包含漏洞信息的原始包数据
   * @returns 返回标准化后的包信息对象，如果via数组为空则返回null
   */
  function _normalizePackage(packageInfo: Vulnerability): NormalizedPackage | null {
    const { via = [] } = packageInfo;
    // 如果via数组为空，说明没有相关的漏洞信息，直接返回null
    if (via.length === 0) {
      return null;
    }
    // 构造标准化的包信息对象
    const info: NormalizedPackage = {
      name: packageInfo.name,
      severity: packageInfo.severity,
      problems: via as NormalizedPackage['problems'],
      effects: packageInfo.effects,
      range: packageInfo.range,
      nodes: packageInfo.nodes || [],
      fixAvailable: packageInfo.fixAvailable,
      depChains: getDepChain(packageInfo, auditResult.vulnerabilities),
    };
    return info;
  }
}

export function normalizeAuditResult(auditResult: NpmAuditReport): NormalizedAudit {
  return { vulnerabilities: _normalizeAuditResult(auditResult) };
}
