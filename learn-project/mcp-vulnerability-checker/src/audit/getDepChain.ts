import { Vulnerability } from '../types/npmAudit.js';

/**
 * 获取漏洞节点的依赖链路
 * @param node - 起始漏洞节点
 * @param globalNodeMap - 全局漏洞节点映射表，用于快速查找节点
 * @returns 返回所有可能的依赖链路，每条链路是一个节点名称数组
 */
export function getDepChain(
  node: Vulnerability,
  globalNodeMap: Record<string, Vulnerability>
): string[][] {
  const chains: string[][] = [];
  const currentPath: string[] = [];

  /**
   * 深度优先搜索遍历依赖树
   * @param currentNode - 当前遍历的节点
   */
  function dfs(currentNode: Vulnerability) {
    if (!currentNode) return;

    // 检测循环依赖，如果当前路径已包含该节点，则将当前路径加入结果集
    if (currentPath.includes(currentNode.name)) {
      chains.push([...currentPath]);
      return;
    }

    // 将当前节点加入路径头部
    currentPath.unshift(currentNode.name);

    // 如果当前节点没有影响其他节点，则将路径加入结果集
    if (!currentNode.effects || currentNode.effects.length === 0) {
      chains.push([...currentPath]);
    } else {
      // 递归遍历所有受影响的节点
      for (const effect of currentNode.effects) {
        dfs(globalNodeMap[effect]);
      }
    }

    // 回溯，移除当前节点
    currentPath.shift();
  }

  dfs(node);
  return chains;
}
