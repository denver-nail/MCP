import { NpmAuditReport } from "../types/auditAPI.js";

const URL = "https://registry.npmjs.org/-/npm/v1/security/audits";

async function fetchWithTimeoutAndRetry(
  input: RequestInfo | URL,
  init: RequestInit & { timeoutMs?: number } = {},
  maxRetries = 2
): Promise<Response> {
  let lastError: unknown;
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    const controller = new AbortController();
    const timeout = setTimeout(
      () => controller.abort(),
      init.timeoutMs ?? 15000
    );
    try {
      const resp = await fetch(input, { ...init, signal: controller.signal });
      clearTimeout(timeout);
      if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
      return resp;
    } catch (err) {
      clearTimeout(timeout);
      lastError = err;
      if (attempt < maxRetries) {
        await new Promise((r) => setTimeout(r, Math.min(1000 * attempt, 3000)));
        continue;
      }
      throw lastError;
    }
  }
  throw lastError;
}

export async function remoteAudit(
  packageName: string,
  packageVersion: string
): Promise<NpmAuditReport | null> {
  const body = {
    name: "example-audit", // 项目名字随便写
    version: "1.0.0", // 项目的版本，随便写
    requires: {
      [packageName]: packageVersion,
    },
    dependencies: {
      [packageName]: {
        version: packageVersion,
      },
    },
  };
  try {
    const resp = await fetchWithTimeoutAndRetry(
      URL,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(body),
        timeoutMs: 15000,
      },
      3
    );
    return (await resp.json()) as NpmAuditReport;
  } catch (error) {
    console.warn("remoteAudit 请求失败，降级为 null:", error);
    return null;
  }
}
