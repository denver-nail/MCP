import { NormalizedPackage, Severity } from "../types/customAudit.js";
import { remoteAudit } from "./remoteAudit.js";

const severityLevelsMap: Record<Severity, number> = {
  info: 0,
  low: 1,
  moderate: 2,
  high: 3,
  critical: 4,
};
export async function currentAudit(name: string, version: string) {
  const auditResult = await remoteAudit(name, version);
  if (!auditResult || Object.keys(auditResult.advisories).length === 0) {
    return null;
  }
  const result: NormalizedPackage = {
    name,
    range: version,
    nodes: ["."],
    depChain: [],
    severity: "info",
    problems: [],
    effects: [],
    fixAvailable: null,
  };
  const advisories = Object.values(auditResult.advisories);
  let maxSeverity: Severity = "info";
  result.problems = advisories.map((advisory) => {
    const sev = (advisory.severity ?? "info") as Severity;
    const problem = {
      name,
      severity: sev,
      dependency: name,
      title: advisory.title,
      source: advisory.id,
    };
    if (severityLevelsMap[sev] > severityLevelsMap[maxSeverity]) {
      maxSeverity = sev;
    }
    return problem;
  });
  result.severity = maxSeverity;
  return result;
}
