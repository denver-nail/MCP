import { parseProject } from "./parseProject/index.js";
import { generateLock } from "./generateLock/generateLock.js";
import { npmAudit } from "./audit/npmAudit.js";

async function testLocalProject(): Promise<void> {
  const projectRoot =
    "D:\\Codes\\MCP\\learn-project\\mcp-vulnerability-checker";
  try {
    const project = await parseProject(projectRoot);
    // 生成的package和package-lock.json文件保存在work目录下
    const workDir = `D:\\Codes\\MCP\\learn-project\\mcp-vulnerability-checker\\work`;
    // 生成的package和package
    await generateLock(workDir, project);
    const result = await npmAudit(workDir);
    console.dir(result);
  } catch (error) {
    console.error("本地项目解析失败：", error);
  }
}
async function testRemoteProject(): Promise<void> {
  const remoteProjectUrl =
    "https://github.com/denver-nail/next14-slcak-clone/tree/main/slack-clone-tutorial";
  try {
    const project = await parseProject(remoteProjectUrl);
    // 生成的package和package-lock.json文件保存在work目录下
    const workDir = `D:\\Codes\\MCP\\learn-project\\mcp-vulnerability-checker\\work`;
    // 生成的package和package
    await generateLock(workDir, project);
    const result = await npmAudit(workDir);
    console.dir(result);
    // console.log("远程项目解析成功：", project);
  } catch (error) {
    console.error("远程项目解析失败：", error);
  }
}
// testLocalProject();
testRemoteProject();
