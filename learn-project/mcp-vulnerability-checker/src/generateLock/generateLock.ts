import fs from "fs";
import { join, dirname } from "path";
import { runCommand } from "../common/utils.js";

/**
 * 异步写入package.json文件
 * @param workDir 工作目录路径
 * @param packageJson package.json对象内容
 */
async function writePackageJson(workDir: string, packageJson: any) {
  // 构造package.json文件的完整路径
  const packageJsonPath = join(workDir, "package.json");

  // 确保目录存在，如果不存在则递归创建
  fs.mkdirSync(dirname(packageJsonPath), { recursive: true });

  // 异步写入package.json文件，将对象序列化为JSON字符串
  await fs.promises.writeFile(
    packageJsonPath,
    JSON.stringify(packageJson),
    "utf-8"
  );
}
/**
 * 创建锁文件
 *
 * @param workDir - 工作目录路径
 * @returns Promise<void>
 */
async function createLockFile(workDir: string) {
  // 构造npm命令，仅生成package-lock.json文件
  const cmd = `npm install --package-lock-only --force`;
  await runCommand(cmd, workDir);
}
/**
 * 生成锁文件的异步函数
 *
 * 该函数首先将package.json内容写入指定工作目录，
 * 然后在该目录下创建锁文件
 *
 * @param workDir - 工作目录路径，用于写入package.json和创建锁文件
 * @param packageJson - package.json文件的内容字符串
 */
export async function generateLock(workDir: string, packageJson: string) {
  await writePackageJson(workDir, packageJson);
  await createLockFile(workDir);
}
