import * as fs from 'fs';
import * as path from 'path';
/**
 * 创建工作目录
 * @param basePath 基础路径参数
 * @returns 创建的工作目录路径
 */
export function createWorkDir(basePath: string): string {
  // 参数合法性校验
  if (!basePath || typeof basePath !== 'string') {
    throw new Error('基础路径参数无效：必须提供非空字符串');
  }

  // 规范化路径
  const normalizedBasePath = path.normalize(basePath);

  // 检查路径是否绝对路径（可选，根据需求决定）
  if (!path.isAbsolute(normalizedBasePath)) {
    throw new Error('基础路径参数无效：必须提供绝对路径');
  }

  // 检查路径是否安全（防止路径遍历攻击）
  if (normalizedBasePath.includes('..')) {
    throw new Error('基础路径参数无效：路径不能包含向上遍历');
  }

  // 确保基础路径存在；不存在则创建
  try {
    if (!fs.existsSync(normalizedBasePath)) {
      fs.mkdirSync(normalizedBasePath, { recursive: true });
    }
  } catch (error) {
    throw new Error(`创建基础路径失败: ${normalizedBasePath}`);
  }

  // 创建/确保基础路径后再校验读写权限
  try {
    fs.accessSync(normalizedBasePath, fs.constants.R_OK | fs.constants.W_OK);
  } catch (error) {
    throw new Error(`基础路径不可访问或无读写权限: ${normalizedBasePath}`);
  }

  // 生成工作目录名称（可以使用时间戳或其他唯一标识）
  const workDirName = `workdir_${Date.now()}`;
  const workDirPath = path.join(normalizedBasePath, workDirName);

  // 创建工作目录
  try {
    fs.mkdirSync(workDirPath, { recursive: true });
  } catch (error) {
    throw new Error(`创建工作目录失败: ${workDirPath}`);
  }

  return workDirPath;
}

/**
 * 删除工作目录
 * @param workDir - 要删除的工作目录路径
 * @returns Promise<void> - 删除操作完成后的Promise
 */
export async function deleteWorkDir(workDir: string): Promise<void> {
  await fs.promises.rm(workDir, { recursive: true }); // 删除工作目录
}
