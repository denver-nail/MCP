import { fileURLToPath } from "url";
import { dirname } from "path";
import { exec } from "child_process";
import { promisify } from "util";

const execAsync = promisify(exec); // 将 exec 转换为返回 Promise 的函数

/**
 * 执行命令并返回标准输出
 * @param cmd 要执行的命令字符串
 * @param cwd 命令执行的工作目录
 * @returns Promise<string> 命令执行成功时返回标准输出内容
 */
export async function runCommand(cmd: string, cwd: string): Promise<string> {
  try {
    // 执行命令并获取标准输出
    const { stdout } = await execAsync(cmd, { cwd, encoding: "utf8" });
    return stdout;
  } catch (unknownError: unknown) {
    // 如果错误对象包含标准输出，则返回该输出
    const maybe = unknownError as { stdout?: string } | undefined;
    if (maybe && typeof maybe.stdout === "string") {
      return maybe.stdout;
    }
    // 重新抛出无法处理的错误
    throw unknownError;
  }
}
/**
 * 生成一个唯一的ID字符串
 *
 * 该函数通过组合随机数和当前时间戳来创建一个唯一的标识符。
 * 使用36进制转换来缩短字符串长度，提高唯一性。
 *
 * @returns 返回一个唯一的字符串ID
 */

export function uniqueId(): string {
  return Math.random().toString(36).substring(2, 15) + Date.now().toString(36);
}

/**
 * 获取文件路径
 *
 * @param importMetaUrl - import.meta.url 的值，用于获取当前模块的 URL
 * @returns 返回对应的文件系统路径
 */
export function getFilename(importMetaUrl: string): string {
  return fileURLToPath(importMetaUrl);
}

/**
 * 根据 import.meta.url 获取当前模块所在的目录路径
 *
 * @param importMetaUrl - import.meta.url 的值，用于确定模块的位置
 * @returns 返回当前模块所在的目录路径
 */
export function getDirname(importMetaUrl: string): string {
  return dirname(getFilename(importMetaUrl));
}
