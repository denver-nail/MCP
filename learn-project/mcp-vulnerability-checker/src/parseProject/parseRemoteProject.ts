interface GitInfo {
  owner: string;
  repo: string;
  branch: string;
  filePath: string;
}

/**
 * 解析GitHub仓库URL，提取所有者、仓库名、分支和文件路径信息
 * 支持格式：
 *   - https://github.com/owner/repo
 *   - https://github.com/owner/repo/tree/branch
 *   - https://github.com/owner/repo/blob/branch/path/to/file
 *   - https://github.com/owner/repo/blame/branch/path/to/file
 *   等等
 *
 * @param url - 完整的GitHub仓库URL地址
 * @returns 包含owner(所有者)、repo(仓库名)、branch(分支)和filePath(文件路径)的对象
 * @throws 当URL不是GitHub地址或格式不正确时抛出错误
 */
export function parseGitHubUrl(url: string): GitInfo {
  try {
    // 解析URL并验证是否为GitHub域名
    const parsedUrl = new URL(url);
    if (parsedUrl.hostname !== "github.com") {
      throw new Error("Only GitHub URLs are supported.");
    }

    // 按照"/"分割路径并过滤空字符串，提取关键信息
    const parts = parsedUrl.pathname.split("/").filter(Boolean);

    if (parts.length < 2) {
      throw new Error(
        "Invalid GitHub repository URL: insufficient path segments"
      );
    }

    // 提取所有者、仓库名
    const owner = parts[0];
    const repo = parts[1];

    let branch = "main"; // 默认分支
    let filePath = ""; // 默认文件路径

    // 处理不同的URL格式
    if (parts.length >= 4) {
      if (parts[2] === "tree" || parts[2] === "blob" || parts[2] === "blame") {
        branch = parts[3];
        // 如果还有更多路径，则作为文件路径
        if (parts.length > 4) {
          filePath = parts.slice(4).join("/");
        }
      }
    } else if (parts.length === 3) {
      // 可能是 https://github.com/owner/repo/branch 格式
      branch = parts[2];
    }

    return { owner, repo, branch, filePath };
  } catch (error) {
    // 处理URL解析错误，转换为更友好的错误信息
    if (error instanceof TypeError) {
      throw new Error("Invalid URL: malformed or missing");
    }
    throw error;
  }
}

/**
 * 获取指定Git仓库的package.json文件URL
 * @param gitInfo 包含仓库所有者、仓库名、分支和文件路径信息的对象
 * @returns 返回package.json文件的CDN URL
 */
async function getPackageJson(gitInfo: GitInfo) {
  let { owner, repo, branch, filePath } = gitInfo;

  // 如果URL中已经指定了package.json文件路径，直接使用
  if (filePath && filePath.endsWith("package.json")) {
    // 移除package.json文件名，只保留目录路径
    const dirPath = filePath.replace(/\/package\.json$/, "");
    const cdnUrl = `https://cdn.jsdelivr.net/gh/${owner}/${repo}@${branch}/${dirPath}/package.json`;

    return cdnUrl;
  }

  // 如果没有指定具体文件路径，尝试获取仓库的默认分支
  if (branch === "main") {
    try {
      const url = `https://api.github.com/repos/${owner}/${repo}`;
      const info = await fetch(url).then((resp) => resp.json());
      branch = info.default_branch || "main";
    } catch (error) {
      console.warn(`无法获取仓库信息，使用默认分支: ${error}`);
      branch = "main";
    }
  }

  // 构造CDN URL
  const cdnUrl = `https://cdn.jsdelivr.net/gh/${owner}/${repo}@${branch}/${filePath}/package.json`;
  return cdnUrl;
}

/**
 * 解析远程项目的 package.json 文件
 * @param url - GitHub 仓库的 URL 地址
 * @returns 返回解析后的 package.json 对象
 */
export async function parseRemoteProject(url: string): Promise<any> {
  try {
    // 解析 GitHub URL 获取仓库信息
    const gitInfo = parseGitHubUrl(url);

    // 获取 package.json 文件的完整 URL
    const packageJsonUrl = await getPackageJson(gitInfo);

    // 获取 package.json 文件内容并解析为 JSON 对象
    const packageJson = await fetch(packageJsonUrl).then((resp) => {
      if (!resp.ok) {
        throw new Error(`HTTP ${resp.status}: ${resp.statusText}`);
      }
      return resp.json();
    });

    return packageJson;
  } catch (error) {
    console.error("远程项目解析失败:", error);
    throw error;
  }
}
