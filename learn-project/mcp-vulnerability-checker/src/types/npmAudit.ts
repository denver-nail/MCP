// 顶层审计报告类型（适用于 npm v8+ 版本）
export interface NpmAuditReport {
  /** 审计报告版本（npm v8+ 为 2） */
  auditReportVersion: number;

  /** 漏洞详情集合（key 为包名，value 为该包的漏洞信息） */
  vulnerabilities: Record<string, Vulnerability>;

  /** 审计元数据（漏洞统计和依赖统计） */
  metadata: AuditMetadata;

  /** （可选）审计过程中产生的错误信息 */
  errors?: string[];
}

// 单个包的漏洞信息类型
export interface Vulnerability {
  /** 包名称 */
  name: string;

  /** 漏洞严重程度 */
  severity: "info" | "low" | "moderate" | "high" | "critical";

  /** 是否为直接依赖（true 表示项目 package.json 中直接声明的依赖） */
  isDirect: boolean;

  /** 漏洞来源链（数组，包含导致该漏洞的上游依赖或漏洞 ID） */
  via: Array<
    | {
        source?: number; // 漏洞 ID
        name?: string; // 关联的包名
        severity?: string; // 关联漏洞的严重程度
        dependency?: string; // 关联的依赖
        title?: string; // 关联漏洞的标题
      }
    | number
  >; // 可能直接包含漏洞 ID 数字

  /** 受该漏洞影响的下游依赖 */
  effects: string[];

  /** 存在漏洞的版本范围 */
  range: string;

  /** 受影响的依赖树节点路径 */
  nodes: string[];

  /** 修复方案（若存在） */
  fixAvailable: {
    name?: string; // 修复后的包名
    version?: string; // 修复后的版本
    isSemVerMajor?: boolean; // 是否为major版本升级
  } | null;
}

// 审计元数据类型（统计信息）
interface AuditMetadata {
  /** 漏洞统计（按严重程度分类） */
  vulnerabilities: {
    info: number;
    low: number;
    moderate: number;
    high: number;
    critical: number;
    total: number;
  };

  /** 依赖统计（按依赖类型分类） */
  dependencies: {
    prod: number; // 生产依赖数量
    dev: number; // 开发依赖数量
    optional: number; // 可选依赖数量
    peer: number; // peer依赖数量
    peerOptional: number; // 可选peer依赖数量
    total: number; // 总依赖数量
  };
}
